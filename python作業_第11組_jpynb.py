# -*- coding: utf-8 -*-
"""Python作業_第11組.jpynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1O5npTus7k_8F84DmS7uJZP1uJ71ROVHq

組員:呂婕筠，項芸，高譽恩，林泊俞

1.
"""

from google.colab import drive
drive.mount('/content/drive')
import pandas as pd
df_Share=pd.read_excel("https://drive.google.com/uc?id=13YJURg236M6tqObCJykLZOStNdEqjfry&export=download",header=0)
print(df_Share)
df_imdb_top_1000=pd.read_excel("https://drive.google.com/uc?id=13YJURg236M6tqObCJykLZOStNdEqjfry&export=download",sheet_name="imdb_top_1000")

"""2."""

df_CSV2=df_CSV.copy()
df_CSV2.columns=['Series_Title','Released_Year','Certificate','Runtime','IMDB_Rating','Meta_score','No_of_Votes','Gross']
df_CSV2
df_CSV.rename(columns={'Series_Title': '電影片名','Runtime': '影片長度'})

"""3."""

print(df.info())
df_CSV["order_no"]=df_CSV["order_no"].to_string()

"""4."""

import pandas as pd
df_Share=pd.read_excel("https://docs.google.com/spreadsheets/d/1ZuLhZjS0KGzNU0jDEeCwwxjGUyNb6cpO/edit#gid=1826780789",header=0)
print(df_Share)
df_DataFrame=pd.read_excel("https://drive.google.com/uc?id=1ZuLhZjS0KGzNU0jDEeCwwxjGUyNb6cpO",sheet_name="imdb1000資料集")
DataFrame.dropna(axis=0,how="any")
imdb_drop = DataFrame.dropna()

"""5."""

import pandas as pd

# 假設已經有一個名為 imdb_drop 的 DataFrame
data = {
    'Movie': ['Movie1', 'Movie2', 'Movie3', 'Movie4', 'Movie5'],
    'IMDB_Rating': [9.2, 8.7, 8.1, 7.9, 8.6]
}

# 創建 DataFrame
imdb_drop = pd.DataFrame(data)

# 定義一個函數來根據 IMDB_Rating 設定評等
def get_rating_category(rating):
    if rating >= 9.0:
        return 'A'
    elif rating < 9.0 and rating >= 8.5:
        return 'B'
    elif rating < 8.5 and rating >= 8.0:
        return 'C'
    else:
        return 'D'

# 使用 apply 方法將評等加入 DataFrame
imdb_drop['評等'] = imdb_drop['IMDB_Rating'].apply(get_rating_category)

# 顯示更新後的 DataFrame
print(imdb_drop)

"""6"""

import pandas as pd

data = {
    '電影片名': ['Movie1', 'Movie2', 'Movie3', 'Movie4', 'Movie5'],
    'IMDB_Rating': [9.2, 8.7, 8.1, 7.9, 8.6]
}

imdb_drop = pd.DataFrame(data)

def get_rating_category(rating):
    if rating >= 9.0:
        return 'A'
    elif rating < 9.0 and rating >= 8.5:
        return 'B'
    elif rating < 8.5 and rating >= 8.0:
        return 'C'
    else:
        return 'D'

imdb_drop['評等'] = imdb_drop['IMDB_Rating'].apply(get_rating_category)

imdb_drop.set_index('電影片名', inplace=True)

print(imdb_drop)

"""7"""

import pandas as pd

data = {
    '電影片名': ['Movie1', 'Movie2', 'Movie3', 'Movie4', 'Movie5'],
    '影片長度': [120, 150, 90, 110, 130],
    'IMDB_Rating': [9.2, 8.7, 8.1, 7.9, 8.6],
    'Meta_scores': [88, 75, 80, 70, 85],
    'No_of_Votes': [120000, 80000, 50000, 30000, 100000],
    'Gross': [150000000, 100000000, 80000000, 50000000, 120000000]
}

imdb_drop = pd.DataFrame(data)

imdb_drop.set_index('電影片名', inplace=True)

imdb_numeric = imdb_drop[['影片長度', 'IMDB_Rating', 'Meta_scores', 'No_of_Votes', 'Gross']]

print(imdb_numeric)

"""8"""

import pandas as pd
import numpy as np

data = {
    '電影片名': ['Movie1', 'Movie2', 'Movie3', 'Movie4', 'Movie5'],
    '影片長度': [120, 150, 90, 110, 130],
    'IMDB_Rating': [9.2, 8.7, 8.1, 7.9, 8.6],
    'Meta_scores': [88, 75, 80, 70, 85],
    'No_of_Votes': [120000, 80000, 50000, 30000, 100000],
    'Gross': [150000000, 100000000, 80000000, 50000000, 120000000]
}

imdb_drop = pd.DataFrame(data)

imdb_drop.set_index('電影片名', inplace=True)

imdb_numeric = imdb_drop[['影片長度', 'IMDB_Rating', 'Meta_scores', 'No_of_Votes', 'Gross']]

mean_values = imdb_numeric.mean()

std_values = imdb_numeric.std()

max_values = imdb_numeric.max()

min_values = imdb_numeric.min()

cov_matrix = imdb_numeric.cov()

corr_matrix = imdb_numeric.corr()

print("平均數:\n", mean_values)
print("\n標準差:\n", std_values)
print("\n最大值:\n", max_values)
print("\n最小值:\n", min_values)
print("\n共變異數矩陣:\n", cov_matrix)
print("\n相關係數矩陣:\n", corr_matrix)

"""9."""

import pandas as pd

data = {
    '片名': ['Movie1', 'Movie2', 'Movie3'],
    '評等': [8.5, 7.2, 6.8],
    '年份': [1994, 2001, 2020]
}

imdb_drop = pd.DataFrame(data)

imdb_rate = imdb_drop[['評等']]

imdb_rate

"""10."""

numeric_data = {
    '數值1': [1, 2, 3],
    '數值2': [4, 5, 6]
}

imdb_numeric = pd.DataFrame(numeric_data)

imdb_merge = pd.concat([imdb_rate, imdb_numeric], axis=1)

imdb_merge

"""11."""

data = {
    '評等': [8.5, 7.2, 6.8, 8.5, 7.2],
    '影片長度': [120, 110, 130, 140, 100],
    'IMDB_Rating': [8.5, 7.1, 6.8, 8.4, 7.3],
    'Meta_score': [90, 75, 65, 88, 70],
    'No_of_Votes': [100000, 50000, 20000, 150000, 40000],
    'Gross': [5000000, 3000000, 1500000, 7000000, 2500000]
}

imdb_merge = pd.DataFrame(data)

grouped = imdb_merge.groupby('評等').agg({
    '影片長度': ['mean', 'count'],
    'IMDB_Rating': ['mean', 'count'],
    'Meta_score': ['mean', 'count'],
    'No_of_Votes': ['mean', 'count'],
    'Gross': ['mean', 'count']
})

grouped

"""12.

"""

import matplotlib.pyplot as plt

certificate_data = {'PG-13': 300, 'R': 500, 'PG': 200, 'Not Rated': 100}

certificates = list(certificate_data.keys())
counts = list(certificate_data.values())

plt.figure(figsize=(8, 8))
plt.pie(counts, labels=certificates, autopct='%1.1f%%', startangle=140)
plt.title('認證項目圓餅圖')
plt.axis('equal')
plt.show()

"""13."""

imdb_U = imdb_drop[imdb_drop['Certificate'] == 'U']

imdb_U = imdb_U[['Certificate', 'Meta_Score']]

print(imdb_U.head())

imdb_U.to_csv('imdb_U.csv', index=False)

"""14."""

import matplotlib.pyplot as plt

meta_scores = imdb_U['Meta_Score']

plt.figure(figsize=(8, 6))

plt.stem(meta_scores, linefmt='grey', markerfmt='C0o', basefmt=' ')

plt.xlabel('Index')
plt.ylabel('Meta_Score')
plt.title('Stem-and-Leaf Plot of Meta_Score')

plt.show()

"""15."""

import seaborn as sns
import matplotlib.pyplot as plt

plt.figure(figsize=(10, 6))

sns.boxplot(x='Certificate', y='No_of_Votes', data=imdb_drop)

plt.xlabel('Certificate')
plt.ylabel('No_of_Votes')
plt.title('Boxplot of No_of_Votes by Certificate')

plt.show()

"""16."""

import pandas as pd

Dat1 = pd.read_csv('https://mopsfin.twse.com.tw/opendata/t187ap46_O_1.csv')
Dat2 = pd.read_csv('https://mopsfin.twse.com.tw/opendata/t187ap46_L_1.csv')

merged_data = pd.concat([Dat1, Dat2], ignore_index=True)

print(merged_data.head())